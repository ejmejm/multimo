import atexit
import os
import signal
import subprocess
from multiprocessing import Process
import sys
import time

import malmoenv.bootstrap

CLIENT_BUILD_RUN_DELAY = 5 # Number of seconds to wait in between separate build
                           # Without this, a run and build will be issued simultaneously
CLIENT_PROCESSES = []      # All client processes

def setup_decomp_workspace(installdir='MalmoPlatform'):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')
    try:
        cmd = ['./gradlew', 'setupDecompWorkspace']
        subprocess.check_call(cmd)
    finally:
        os.chdir(cwd)

def build_client(port, installdir='MalmoPlatform', replaceable=False, env=False, score_policy=0):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')

    config_str = \
"""
# Configuration file
# Autogenerated from client_controller.py options

malmoports {{
I:portOverride={}
}}
malmoscore {{
I:policy={}
}}""".format(port, score_policy)

    if replaceable:
        config_str += \
"""runtype {
B:replaceable=true
}"""

    if env:
        config_str += \
"""envtype {
B:env=true
}"""

    with open('run/config/malmomodCLIENT.cfg', 'w+') as f:
        f.write(config_str)

    try:
        cmd = ['./gradlew', 'build']
        subprocess.check_call(cmd)
    finally:
        os.chdir(cwd)

def run_client(installdir='MalmoPlatform'):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')

    try:
        cmd = ['./gradlew', 'runClient']
        client = subprocess.Popen(cmd)
        CLIENT_PROCESSES.append(client)
    finally:
        os.chdir(cwd)

    return client


# def build_client(port, installdir="MalmoPlatform", replaceable=False):
#     launch_script = './launchClient.sh'
#     if os.name == 'nt':
#         launch_script = 'launchClient.bat'
#     cwd = os.getcwd()
#     os.chdir(installdir)
#     os.chdir("Minecraft")
#     try:
#         cmd = [launch_script, '-port', str(port), '-env']
#         if replaceable:
#             cmd.append('-replaceable')
#         subprocess.check_call(cmd)
#     finally:
#         os.chdir(cwd)

# def start_n_clients(n_clients, start_port=9000, ports=None):
#     """Starts n Minecraft clients"""

#     if ports is None:
#         ports = list(range(start_port, start_port + n_clients))

#     assert len(ports) >= n_clients, 'The length of ports must equal to or greather than n_clients'

#     pids = []
#     for client_idx in range(n_clients):
#         new_pid = os.fork()

#         if new_pid == 0: # Child process
#             malmoenv.bootstrap.launch_minecraft(ports[client_idx])
#             print('Minecraft client with pid, "{}" dying.'.format(os.getpid()))
#             os._exit(0)
#         else:
#             pids.append(new_pid)
    
#     return pids

# TODO: Stop rebuilding and instead just change the port override at
# .../multimo/MalmoPlatform/Minecraft/run/config/malmomodeCLIENT.cfg
def start_n_clients(n_clients, start_port=9000, ports=None):
    """Starts n Minecraft clients."""

    if ports is None:
        ports = list(range(start_port, start_port + n_clients))

    assert len(ports) >= n_clients, 'The length of ports must equal to or greather than n_clients'

    setup_decomp_workspace()

    new_processes = []
    for client_idx in range(n_clients):
        build_client(ports[client_idx])
        print('Finished build for client with port, {}!'.format(ports[client_idx]))

        new_client = run_client()
        if new_client is not None:
            new_processes.append(new_client)
            CLIENT_PROCESSES.append(new_client)

        time.sleep(CLIENT_BUILD_RUN_DELAY)
    
    return new_processes
    
def start_client(port=9000, rebuild=True):
    """Starts a Minecraft client."""

    if rebuild:
        setup_decomp_workspace()
        build_client(port)
        print('Finished build for client with port, {}!'.format(port))

    new_client = run_client()
    if new_client is not None:
        CLIENT_PROCESSES.append(new_client)
    
    return new_client

def cleanup_clients():
    """Ensure that all Minecraft clients are closed when this program ends."""
    for client in CLIENT_PROCESSES:
        client.kill()
    print('Killed all Minecraft clients.')

atexit.register(cleanup_clients)

# Try using exammples from .../multimo/MalmoPlatform/Malmo/samples/Python_examples

if __name__ == '__main__':
    start_client(10000)
    input('Enter any input to kill the program...')