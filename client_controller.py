import os
import subprocess

import malmoenv.bootstrap

def setup_decomp_workspace(installdir='MalmoPlatform'):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')
    try:
        cmd = ['./gradlew', 'setupDecompWorkspace']
        subprocess.check_call(cmd)
    finally:
        os.chdir(cwd)

def build_client(port, installdir='MalmoPlatform', replaceable=False, env=True, score_policy=0):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')

    config_str = \
"""# Configuration file
# Autogenerated from client_controller.py options

malmoports {{
I:portOverride={}
}}
malmoscore {{
I:policy={}
}}""".format(port, score_policy)

    if replaceable:
        config_str += \
"""runtype {
B:replaceable=true
}"""

    if env:
        config_str += \
"""envtype {
B:env=true
}"""

    with open('run/config/malmomodCLIENT.cfg', 'w+') as f:
        f.write(config_str)

    try:
        cmd = ['./gradlew', 'build']
        subprocess.check_call(cmd)
    finally:
        os.chdir(cwd)

def run_client(installdir='MalmoPlatform'):
    cwd = os.getcwd()
    os.chdir(installdir)
    os.chdir('Minecraft')

    try:
        cmd = ['./gradlew', 'runClient']
        subprocess.check_call(cmd)
    finally:
        os.chdir(cwd)


# def build_client(port, installdir="MalmoPlatform", replaceable=False):
#     launch_script = './launchClient.sh'
#     if os.name == 'nt':
#         launch_script = 'launchClient.bat'
#     cwd = os.getcwd()
#     os.chdir(installdir)
#     os.chdir("Minecraft")
#     try:
#         cmd = [launch_script, '-port', str(port), '-env']
#         if replaceable:
#             cmd.append('-replaceable')
#         subprocess.check_call(cmd)
#     finally:
#         os.chdir(cwd)

# def start_n_clients(n_clients, start_port=9000, ports=None):
#     """Starts n Minecraft clients"""

#     if ports is None:
#         ports = list(range(start_port, start_port + n_clients))

#     assert len(ports) >= n_clients, 'The length of ports must equal to or greather than n_clients'

#     pids = []
#     for client_idx in range(n_clients):
#         new_pid = os.fork()

#         if new_pid == 0: # Child process
#             malmoenv.bootstrap.launch_minecraft(ports[client_idx])
#             print('Minecraft client with pid, "{}" dying.'.format(os.getpid()))
#             os._exit(0)
#         else:
#             pids.append(new_pid)
    
#     return pids



# INFO: ->mcp(9001) Listening for messages on port 9001

def start_n_clients(n_clients, start_port=9000, ports=None):
    """Starts n Minecraft clients"""

    if ports is None:
        ports = list(range(start_port, start_port + n_clients))

    assert len(ports) >= n_clients, 'The length of ports must equal to or greather than n_clients'

    setup_decomp_workspace()

    pids = []
    for client_idx in range(n_clients):
        build_client(ports[client_idx])
        print('Finished build for client with port, {}!'.format(ports[client_idx]))

        
        if new_pid == 0: # Child process
            run_client()
            os._exit(0)
        else:
            os.wait()
    
    return pids


if __name__ == '__main__':
    # pids = start_n_clients(2)
    # print(pids)
    # setup_decomp_workspace()
    build_client(9005)
    run_client()